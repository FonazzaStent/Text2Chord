"""Text to Chord 1.3.0 - Convert text to chords.
Copyright (C) 2023  Fonazza-Stent

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>."""


import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import *
import os
import io
import math
from tkinter import messagebox
import musicpy
from shutil import copyfile
from os import remove
import os
from tkinter.filedialog import asksaveasfilename
from tkinter import *
from tkinter import messagebox

notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]
rgb_scale = 255
cmyk_scale = 100
steps=[[0, 1, 3, 4, 6, 8, 10, 0], [0, 1, 3, 5, 6, 8, 10, 0], [0, 1, 3, 5, 7, 8, 10, 0], [0, 1, 3, 5, 7, 9, 10, 0], [0, 2, 3, 5, 6, 8, 10, 0], [0, 2, 3, 5, 7, 8, 10, 0], [0, 2, 3, 5, 7, 9, 10, 0], [0, 2, 3, 5, 7, 9, 11, 0], [0, 2, 4, 5, 7, 8, 10, 0], [0, 2, 4, 5, 7, 9, 10, 0], [0, 2, 4, 5, 7, 9, 11, 0], [0, 2, 4, 6, 7, 9, 10, 0], [0, 2, 4, 6, 7, 9, 11, 0], [0, 2, 4, 6, 8, 9, 11, 0]]
stepsitem=[]
stepscale=[]
stepscales=[]
chord_count=1
chord_two_play=[]
chord_one_play=[]
chord_three_play=[]
scales_one=[]
scales_two=[]
scales_three=[]

#init
def init():
    global c
    global rc
    global bc
    global gc
    global blue
    global red
    global green
    global lettern
    global numbersum
    global redsum
    global greensum
    global bluesum
    global redlength
    global greenlength
    global bluelength
    global notes
    global rgb_scale
    global cmyk_scale
    global notevalue
    global stepstransposed
    global chordsteps
    global scale
    global scales
    global scalecombo

    chordsteps=[]
    scale=[]
    scales=[]
    stepstransposed=[]
    scalecombo=[]
    c=9.84
    rc=28.44
    bc=23.27
    gc=42.5
    blue=0
    red=0
    green=0
    lettern=1
    numbersum=0
    redsum=0
    greensum=0
    bluesum=0
    redlength=0
    greenlength=0
    bluelength=0
    notevalue=0


def rgb_to_cmyk(r,g,b):
    if (r == 0) and (g == 0) and (b == 0):
        # black
        return 0, 0, 0, cmyk_scale

    # rgb [0,255] -> cmy [0,1]
    c = 1 - r / float(rgb_scale)
    m = 1 - g / float(rgb_scale)
    y = 1 - b / float(rgb_scale)

    # extract out k [0,1]
    min_cmy = min(c, m, y)
    c = (c - min_cmy) 
    m = (m - min_cmy) 
    y = (y - min_cmy) 
    k = min_cmy

    # rescale to the range [0,cmyk_scale]
    cmyk=[ int(c*cmyk_scale), int(m*cmyk_scale), int(y*cmyk_scale), int(k*cmyk_scale)]
    return cmyk
    
#Create app window
def create_app_window():
    global top
    global root
    img=b''

    root= tk.Tk()
    top= root
    #top.geometry("588x409+428+131")
    top.geometry("770x410")
    top.resizable(0,0)
    top.title("Text to Chord")
    favicon=tk.PhotoImage(data=img) 
    root.wm_iconphoto(True, favicon)

#Textbox
def create_textbox():
    global textbox
    textbox = Text(top)
    textbox.place(x=20, y=20, height=340, width=400)
    scroll_1=Scrollbar (top)
    scroll_1.place(x=421, y=20, height=340, anchor='n')
    textbox.configure(yscrollcommand=scroll_1.set)
    scroll_1.configure(command=textbox.yview)
    textbox.focus_set()
    textbox.bind("<Button-3>", context_menu)



#ChordDisplay
def chord_display():
    global scale_one_combo
    global scale_two_combo
    global scale_three_combo
    global chord_one
    global chord_one_label
    chord_one_button=Button(top)
    chord_one_button.place(x=450,y=20,height=30,width=100)
    chord_one_button.configure(text="Play Chord")
    chord_one_button.bind("<Button-1>",play_chord_one)
    chord_one=Text(top)
    chord_one.place(x=450,y=60,height=30,width=120)
    chord_one.configure(state='disabled')
    chord_one_label=Label(top)
    chord_one_label.place(x=450,y=100,width=300)
    chord_one_label.configure(text="Chord n.1                        ")
    global chord_two
    global chord_two_label
    chord_two_button=Button(top)
    chord_two_button.place(x=450,y=140,height=30,width=100)
    chord_two_button.configure(text="Play Chord")
    chord_two_button.bind("<Button-1>",play_chord_two)
    chord_two=Text(top)
    chord_two.place(x=450,y=190,height=30,width=120)
    chord_two.configure(state='disabled')
    chord_two_label=Label(top)
    chord_two_label.place(x=450,y=230,width=300)
    chord_two_label.configure(text="Chord n.2                        ")
    global chord_three
    global chord_three_label
    chord_three_button=Button(top)
    chord_three_button.place(x=450,y=270,height=30,width=100)
    chord_three_button.configure(text="Play Chord")
    chord_three_button.bind("<Button-1>",play_chord_three)
    chord_three=Text(top)
    chord_three.place(x=450,y=320,height=30,width=120)
    chord_three.configure(state='disabled')
    chord_three_label=Label(top)
    chord_three_label.place(x=450,y=360,width=300)
    chord_three_label.configure(text="Chord n.3                        ")
    scale_one_combo=ttk.Combobox(top)
    scale_one_combo.configure(state="readonly",values=[" "])
    scale_one_combo.place(x=590,y=60,height=30,width=150)
    scale_one_button=Button(top)
    scale_one_button.configure(text="Play Scale")
    scale_one_button.place(x=610,y=20,height=30,width=100)
    scale_one_button.bind("<Button-1>",play_scale_one)
    scale_two_combo=ttk.Combobox(top)
    scale_two_combo.configure(state="readonly",values=[" "])
    scale_two_combo.place(x=590,y=190,height=30,width=150)
    scale_two_button=Button(top)
    scale_two_button.configure(text="Play Scale")
    scale_two_button.place(x=610,y=140,height=30,width=100)
    scale_two_button.bind("<Button-1>",play_scale_two)
    scale_three_combo=ttk.Combobox(top)
    scale_three_combo.configure(state="readonly",values=[" "])
    scale_three_combo.place(x=590,y=320,height=30,width=150)
    scale_three_button=Button(top)
    scale_three_button.configure(text="Play Scale")
    scale_three_button.place(x=610,y=270,height=30,width=100)
    scale_three_button.bind("<Button-1>",play_scale_three)


#Create menu
def create_menu():
    global menubar
    global sub_menu
    menubar=tk.Menu(top, tearoff=0)
    top.configure(menu=menubar)
    sub_menu=tk.Menu(top, tearoff=0)
    menubar.add_cascade(menu=sub_menu,compound="left", label="File")
    sub_menu.add_command(compound="left",label="Save chord 1", command=save_chord1)
    sub_menu.add_command(compound="left",label="Save scale 1", command=save_scale1)
    sub_menu.add_command(compound="left",label="Save chord 2", command=save_chord2)
    sub_menu.add_command(compound="left",label="Save scale 2", command=save_scale2)
    sub_menu.add_command(compound="left",label="Save chord 3", command=save_chord3)
    sub_menu.add_command(compound="left",label="Save scale 3", command=save_scale3)
    """sub_menu.add_command(compound="left",label="Save history", command=save_history, accelerator="Alt+H")
    sub_menu.add_command(compound="left",label="Erase history", command=erase_history, accelerator="Alt+E")"""
    sub_menu.add_command(compound="left", label="Paste", command=paste, accelerator="Alt+P")
    sub_menu.add_command(compound="left",label="Clear", command=ClearTextBox, accelerator="Alt+L")
    sub_menu.add_command(compound="left",label="Quit", command=QuitApp, accelerator="Alt+Q")
    """top.bind_all("<Alt-h>",save_history_hotkey)
    top.bind_all("<Alt-e>",erase_history_hotkey)"""
    top.bind_all("<Alt-p>",paste_hotkey)
    top.bind_all("<Alt-l>",ClearTextBox_hotkey)
    top.bind_all("<Alt-q>",Quit_hotkey)
    menubar.bind_all("<Alt-f>",menubar.invoke(1))

    #edit menu
    global edit_menu
    edit_menu=tk.Menu(top,tearoff=0)
    menubar.add_cascade(menu=edit_menu,compound="left", label="Play")
    edit_menu.add_command(compound="left",label="Generate chord", command=GenerateChord, accelerator="Alt+G")
    top.bind_all("<Alt-g>",GenerateChord_hotkey)
    """edit_menu.add_command(compound="left",label="Play chord", command=play_chord, accelerator="Alt+P")
    top.bind_all("<Alt-p>",play_chord_hotkey)
    edit_menu.add_command(compound="left",label="Play scale", command=play_scale, accelerator="Alt+L")
    top.bind_all("<Alt-l>",play_scale_hotkey)"""

#PasteMenu
def paste_text():
    textbox
    textbox.event_generate(("<<Paste>>"))

def context_menu(event):
    menu = Menu(root, tearoff = 0)
    menu.add_command(label="Paste", command=paste_text)
    try: 
        menu.tk_popup(event.x_root, event.y_root)
    finally: 
        menu.grab_release()


#GenerateColor

def sine(value, letternumber):
    global blue
    blue=blue+value
    global bluelength
    bluelength=bluelength+1
    global bluesum
    bluesum=bluesum+letternumber

def triangle (value, letternumber):
    global red
    red=red+value
    global redlength
    redlength=redlength+1
    global redsum
    redsum=redsum+letternumber

def square (value, letternumber):
    global green
    green=green+value
    global greenlength
    greenlength= greenlength+1
    global greensum
    greensum=greensum+letternumber

def sine2(value, letternumber):
    global blue
    blue=blue+value
    global lettern
    lettern=letternumber
    global numbersum
    numbersum=numbersum+lettern

def triangle2 (value, letternumber):
    global red
    red=red+value
    global lettern
    lettern=letternumber
    global numbersum
    numbersum=numbersum+lettern    

def square2 (value, letternumber):
    global green
    green=green+value
    global lettern
    lettern=letternumber
    global numbersum
    numbersum=numbersum+lettern

    
def rgb_hack(rgb):
    return "#%02x%02x%02x" % rgb

def GenerateChord():
    global blue
    blue=0
    global red
    red=0
    global green
    green=0
    global numbersum
    global redsum
    global redlength
    global greensum
    global greenlength
    global bluesum
    global bluelength
    global notevalue
    global chord_one_play
    global chord_two_play
    global chord_three_play
    global chord
    global rootvalue
    global chordsteps
    global chord_count
    global scale_one_combo
    global scale_two_combo
    global scale_three_combo
    global notevalue
    global octave
    scale_one_combo.set(' ')
    scale_two_combo.set(' ')
    scale_three_combo.set(' ')
    chord_one_play=[]
    chord_two_play=[]
    chord_three_play=[]
    numbersum=0
    text=textbox.get(1.0,END)
    textvalidate=0
    length=len(text)-1
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            textvalidate=1
    if textvalidate==0:
        text="Hello"
    length=len(text)-1
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            if char=="A" or char=="a":
                triangle(int(1*rc), 1)
            if char=="B" or char=="b":
                sine (int(1*bc), 1)
            if char=="C" or char=="c":
                sine(int(2*bc), 2)
            if char=="D" or char=="d":
                sine(int(3*bc),3)
            if char=="E" or char=="e":
                square(int(1*gc),1)
            if char=="F" or char=="f":
                square(int(2*gc),2)
            if char=="G" or char=="g":
                sine(int(4*bc),4)
            if char=="H" or char=="h":
                square(int(3*gc),3)
            if char=="i" or char=="I":
                square(int(4*gc),4)
            if char=="J" or char=="j":
                sine(int(5*bc),5)
            if char=="K" or char=="k":
                triangle(int(2*rc),2)
            if char=="L" or char=="l":
                square(int(5*gc),5)
            if char=="M" or char=="m":
                triangle(int(3*rc),3)
            if char=="N" or char=="n":
                triangle(int(4*rc),4)
            if char=="O" or char=="o":
                sine(int(6*bc),6)
            if char=="P" or char=="p":
                sine(int(7*bc),7)
            if char=="Q" or char=="q":
                sine(int(8*bc),8)
            if char=="R" or char=="r":
                sine(int(9*bc),9)
            if char=="S" or char=="s":
                sine(int(10*bc),10)
            if char=="T" or char=="t":
                square(int(6*gc),6)
            if char=="U" or char=="u":
                sine(int(11*bc),11)
            if char=="V" or char=="v":
                triangle(int(5*rc),5)
            if char=="W" or char=="w":
                triangle(int(6*rc),6)
            if char=="X" or char=="x":
                triangle(int(7*rc),7)
            if char=="Y" or char=="y":
                triangle(int(8*rc),8)
            if char=="Z" or char=="z":
                triangle(int(9*rc),9)
    if bluelength>0:
        blue=int(blue/bluelength)
        bluevalue=int(blue*bluelength)
    else:
        blue=0
        bluevalue=0
    if redlength>0:
        red=int(red/redlength)
        redvalue=int(red*redlength)
    else:
        red=0
        redvalue=0
    if greenlength>0:
        green=int(green/greenlength)
        greenvalue=int(green*greenlength)
    else:
        green=0
        greenvalue=0
    RGB=[redvalue,greenvalue,bluevalue]
    RGB2=[red,green,blue]
    maxvalue=max(RGB)
    maxvalue2=max(RGB2)
    R=int(maxvalue2/maxvalue*redvalue)
    G=int(maxvalue2/maxvalue*greenvalue)
    B=int(maxvalue2/maxvalue*bluevalue)
    cmyk=rgb_to_cmyk(R,G,B)
    chord=[]
    rootvalue=0
    for chars in text:
        rootvalue=rootvalue+1
        if rootvalue>11:
            rootvalue=0
    root=notes[rootvalue-2]
    chord.append(root)
    chordsteps.append(rootvalue-2)
    chord_one_play.append(root+'2')
    notevalue=rootvalue-2        
    octave=4
    for value in cmyk:
        interval=int(value/16.66)+3
        if value==0:
            interval=3
        notevalue=notevalue+interval
        if notevalue>11:
            notevalue=notevalue-11
            octave=octave+1
        validate_note()
        chord.append(notes[notevalue])
        chordsteps.append(notevalue)
        chord_one_play.append(notes[notevalue]+str(octave))
    chord_one.configure(state='normal')
    chord_one.delete(1.0,END)
    chord_one.insert(INSERT,chord)
    chord_one.configure(state='disabled')
    #chordname=musicpy.alg.detect(musicpy.chord(chord),root_preference=True)
    name_chord()
    chord_one_label.configure(text=chordname_string)
    #print (chord_one_play)
    guess_scale()
    init()


#algorithm 2
    blue=0
    red=0
    green=0
    numbersum=0
    text=textbox.get(1.0,2000.0)
    textvalidate=0
    length=len(text)-1
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            textvalidate=1
    if textvalidate==0:
        text="Hello"
    length=len(text)
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            if char=="A" or char=="a":
                triangle2(int(1*rc), 1)
            if char=="B" or char=="b":
                sine2 (int(1*bc), 1)
            if char=="C" or char=="c":
                sine2(int(2*bc), 2)
            if char=="D" or char=="d":
                sine2(int(3*bc),3)
            if char=="E" or char=="e":
                square2(int(1*gc),1)
            if char=="F" or char=="f":
                square2(int(2*gc),2)
            if char=="G" or char=="g":
                sine2(int(4*bc),4)
            if char=="H" or char=="h":
                square2(int(3*gc),3)
            if char=="i" or char=="I":
                square2(int(4*gc),4)
            if char=="J" or char=="j":
                sine2(int(5*bc),5)
            if char=="K" or char=="k":
                triangle2(int(2*rc),2)
            if char=="L" or char=="l":
                square2(int(5*gc),5)
            if char=="M" or char=="m":
                triangle2(int(3*rc),3)
            if char=="N" or char=="n":
                triangle2(int(4*rc),4)
            if char=="O" or char=="o":
                sine2(int(6*bc),6)
            if char=="P" or char=="p":
                sine2(int(7*bc),7)
            if char=="Q" or char=="q":
                sine2(int(8*bc),8)
            if char=="R" or char=="r":
                sine2(int(9*bc),9)
            if char=="S" or char=="s":
                sine2(int(10*bc),10)
            if char=="T" or char=="t":
                square2(int(5*gc),6)
            if char=="U" or char=="u":
                sine2(int(11*bc),11)
            if char=="V" or char=="v":
                triangle2(int(5*rc),5)
            if char=="W" or char=="w":
                triangle2(int(6*rc),6)
            if char=="X" or char=="x":
                triangle2(int(7*rc),7)
            if char=="Y" or char=="y":
                triangle2(int(8*rc),8)
            if char=="Z" or char=="z":
                triangle2(int(9*rc),9)
    if bluelength>0:
        blue=int(blue/bluelength)
        blue=int(blue*bluelength)
    else:
        blue=0
    if redlength>0:
        red=int(red/redlength)
        red=int(red*redlength)
    else:
        red=0
    if greenlength>0:
        green=int(green/greenlength)
        green=int(green*greenlength)
    else:
        green=0
    RGB=[red,green,blue]
    maxvalue=max(RGB)
    if red>0:
        R=int(255/maxvalue*red)
    else:
        R=0
    if green>0:
        G=int(255/maxvalue*green)
    else:
        G=0
    if blue>0:
        B=int(255/maxvalue*blue)
    else:
        B=0
    maxredlightness=redlength*9
    maxgreenlightness=greenlength*6
    maxbluelightness=bluelength*11
    if maxredlightness>0:
        redlightness=int(100*redsum/maxredlightness)
    else:
        redlightness=0
    if maxgreenlightness>0:
        greenlightness=int(100*greensum/maxgreenlightness)
    else:
        greenlightness=0
    if maxbluelightness>0:
        bluelightness=int(100*bluesum/maxbluelightness)
    else:
        bluelightness=0
    redvalue=int(redlightness*R/100)
    greenvalue=int(greenlightness*G/100)
    bluevalue=int(bluelightness*B/100)
    cmyk=rgb_to_cmyk(R,G,B)
    chord=[]
    rootvalue=0
    for chars in text:
        rootvalue=rootvalue+1
        if rootvalue>11:
            rootvalue=0
    root=notes[rootvalue-2]
    chord.append(root)
    chordsteps.append(rootvalue-2)
    chord_two_play.append(root+'2')
    notevalue=rootvalue-2       
    octave=4    
    for value in cmyk:
        try:
            interval=int(value/16.66)+3
        except:
            interval=3
        notevalue=notevalue+interval
        if notevalue>11:
            notevalue=notevalue-11
            octave=octave+1
        validate_note()
        chord.append(notes[notevalue])
        chordsteps.append(notevalue)
        chord_two_play.append(notes[notevalue]+str(octave))
    chord_two.configure(state='normal')
    chord_two.delete(1.0,END)
    chord_two.insert(INSERT,chord)
    chord_two.configure(state='disabled')
    #chordname=musicpy.alg.detect(musicpy.chord(chord),root_preference=True)
    name_chord()
    chord_two_label.configure(text=chordname_string)
    chord_count=2
    guess_scale()
    init()

#algorithm 3

    blue=0
    red=0
    green=0
    numbersum=0
    text=textbox.get(1.0,2000.0)
    textvalidate=0
    length=len(text)
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            textvalidate=1
    if textvalidate==0:
        text="Hello"
    length=len(text)
    for letters in range (0,length):
        char=text[letters]
        asciicode=ord(char)
        if (asciicode>64 and asciicode<91) or (asciicode>96 and asciicode<123):
            if char=="A" or char=="a":
                triangle(int(1*rc), 1)
            if char=="B" or char=="b":
                sine (int(1*bc), 2)
            if char=="C" or char=="c":
                sine(int(2*bc), 3)
            if char=="D" or char=="d":
                sine(int(3*bc),4)
            if char=="E" or char=="e":
                square(int(1*gc),5)
            if char=="F" or char=="f":
                square(int(2*gc),6)
            if char=="G" or char=="g":
                sine(int(4*bc),7)
            if char=="H" or char=="h":
                square(int(3*gc),8)
            if char=="i" or char=="I":
                square(int(4*gc),9)
            if char=="J" or char=="j":
                sine(int(5*bc),10)
            if char=="K" or char=="k":
                triangle(int(2*rc),11)
            if char=="L" or char=="l":
                square(int(5*gc),12)
            if char=="M" or char=="m":
                triangle(int(3*rc),13)
            if char=="N" or char=="n":
                triangle(int(4*rc),14)
            if char=="O" or char=="o":
                sine(int(6*bc),15)
            if char=="P" or char=="p":
                sine(int(7*bc),16)
            if char=="Q" or char=="q":
                sine(int(8*bc),17)
            if char=="R" or char=="r":
                sine(int(9*bc),18)
            if char=="S" or char=="s":
                sine(int(10*bc),19)
            if char=="T" or char=="t":
                square(int(5*gc),20)
            if char=="U" or char=="u":
                sine(int(11*bc),21)
            if char=="V" or char=="v":
                triangle(int(5*rc),22)
            if char=="W" or char=="w":
                triangle(int(6*rc),23)
            if char=="X" or char=="x":
                triangle(int(7*rc),24)
            if char=="Y" or char=="y":
                triangle(int(8*rc),25)
            if char=="Z" or char=="z":
                triangle(int(9*rc),26)

    if bluelength>0:
        blue=int(blue/bluelength)
        blue=int(blue*bluelength)
    else:
        blue=0
    if redlength>0:
        red=int(red/redlength)
        red=int(red*redlength)
    else:
        red=0
    if greenlength>0:
        green=int(green/greenlength)
        green=int(green*greenlength)
    else:
        green=0
    RGB=[red,green,blue]
    maxvalue=max(RGB)
    R=int(255/maxvalue*red)
    G=int(255/maxvalue*green)
    B=int(255/maxvalue*blue)
    cmyk=rgb_to_cmyk(R,G,B)
    chord=[]
    rootvalue=0
    for chars in text:
        rootvalue=rootvalue+1
        if rootvalue>11:
            rootvalue=0
    root=notes[rootvalue-2]
    chord.append(root)
    chordsteps.append(rootvalue-2)
    chord_three_play.append(root+'2')
    notevalue=rootvalue-2        
    octave=4
    for value in cmyk:
        try:
            interval=int(value/16.66)+3
        except:
            interval=3
        notevalue=notevalue+interval
        if notevalue>11:
            notevalue=notevalue-11
            octave=octave+1
        validate_note()
        chord.append(notes[notevalue])
        chordsteps.append(notevalue)
        chord_three_play.append(notes[notevalue]+str(octave))
    chord_three.configure(state='normal')
    chord_three.delete(1.0,END)
    chord_three.insert(INSERT,chord)
    chord_three.configure(state='disabled')
    #chordname=musicpy.alg.detect(musicpy.chord(chord),root_preference=True)
    name_chord()
    chord_three_label.configure(text=chordname_string)
    chord_count=3
    guess_scale()
    chord_count=1
    init()

def validate_note():
    global notevalue
    global octave
    for chordnote in chord:
        if notes[notevalue]==chordnote:
            notevalue=notevalue+2
            if notevalue>11:
                notevalue=notevalue-11
                octave=octave+1
            validate_note()

def guess_scale():
    global match
    global matchlist
    global scale
    global scales
    global stepstransposed
    global stepsitem
    global root
    global stepscale
    global stepscales
    global chord
    global rootvalue
    global scale
    global chordsteps
    global scalecombo
    global scale_one_combo
    global scale_two_combo
    global scale_three_combo
    global chord_count
    global scales_one
    global scales_two
    global scales_three
    #print (chord_count)
    match=0
    matchlist=[]
    stepscale=[]
    stepscales=[]
    chordlen=len(chordsteps)
    stepslen=len(steps)
    for n in range (0, stepslen):
        for m in range (0,7):
            transpose=steps[n][m]+(rootvalue-2)
            if transpose>11:
                transpose=transpose-12
            stepsitem.append(transpose)
            transpose=0
        stepstransposed.append(stepsitem)
        stepsitem=[]
    #print (stepstransposed)
    #print ("chordsteps ", chordsteps)
    for n in range (0, stepslen):
        for m in range (0,7):
            for o in range (0,chordlen):
                #print (chordsteps[o],steps[n][m])
                if chordsteps[o]==stepstransposed[n][m]:
                    match=match+1
                    
        matchlist.append(match)
        match=0
    #print (matchlist)


    for n in range (0,stepslen):
        if matchlist[n]==max(matchlist):
            #print (steps[n])
            #print (stepstransposed[n])
            for x in range (0,7):
                noteindex=stepstransposed[n][x]
                scalenote=notes[noteindex]
                scale.append(scalenote)
                stepscale.append(noteindex)
        if scale!=[]:
            scales.append(scale)
            stepscales.append(stepscale)
        if chord_count==1:
            scales_one=scales
        if chord_count==2:
            scales_two=scales
        if chord_count==3:
            scales_three=scales
        scale=[]
        stepscale=[]
    scalestring=''
    #print ("\n")
    #print ("Scales:")
    guess=1
    for item in scales:
        for note in item:
            scalestring=scalestring+note+" "
        #print ("Match",str(guess)+": ",scalestring)
        scalecombo.append(scalestring)
        guess=guess+1
        scalestring=''
    if chord_count==1:
        scale_one_combo.configure(value=scalecombo)
    if chord_count==2:
        scale_two_combo.configure(value=scalecombo)
    if chord_count==3:
        scale_three_combo.configure(value=scalecombo)
    scale_one_combo.current(0)
    scale_two_combo.current(0)
    scale_three_combo.current(0)
    guess=0
    #print ("\n")

#Play Chord
def play_chord_one(event):
    global chord_one_play
    if chord_one_play!=[]:
        c_one=musicpy.chord(notes=chord_one_play,interval=0, duration=2)
        musicpy.play(c_one,100)
        copyfile("temp.mid","chord1.mid")
        remove("temp.mid")
def play_chord_two(event):
    global chord_two_play
    c_two=musicpy.chord(notes=chord_two_play,interval=0, duration=2)
    musicpy.play(c_two,100)
    copyfile("temp.mid","chord2.mid")
    remove("temp.mid")
def play_chord_three(event):
    global chord_three_play
    c_three=musicpy.chord(notes=chord_three_play,interval=0, duration=2)
    musicpy.play(c_three,100)
    copyfile("temp.mid","chord3.mid")
    remove("temp.mid")

#Play Scale
def play_scale_one(event):
    global scales_one
    global scale_one_combo
    index=scale_one_combo.current()
    octave=5
    c=musicpy.chord(scales_one[index],interval=0.3,duration=0.3)
    musicpy.play(c,100)
    copyfile("temp.mid","scale1.mid")
    remove ("temp.mid")

def play_scale_two(event):
    global scales_two
    global scale_two_combo
    index=scale_two_combo.current()
    octave=5
    c=musicpy.chord(scales_two[index],interval=0.3,duration=0.3)
    musicpy.play(c,100)
    copyfile("temp.mid","scale2.mid")
    remove ("temp.mid")

def play_scale_three(event):
    global scales_three
    global scale_three_combo
    index=scale_three_combo.current()
    octave=5
    c=musicpy.chord(scales_three[index],interval=0.3,duration=0.3)
    musicpy.play(c,100)
    copyfile("temp.mid","scale3.mid")
    remove ("temp.mid")


#Name Chord
def name_chord():
    global chordname_string
    chord_length=len(chord)
    chordname=[]
    chord_notes=[]
    chordname_string=''
    for n in range (0,12):
        if chord[0]==notes[n]:
            index=n
            for i in range (0,12):
                chord_notes.append(notes[index])
                index=index+1
                if index>11:
                    index=0
    #print (chord_notes)

    chordname.append(chord[0])

    sus=False
    sus_index=999
    ninth=False
    ninth_index=999
    seventh_maj=False
    seventh_maj_index=999
    seventh=False
    seventh_index=999
    sixth=False
    sixth_index=999
    eleventh=False
    eleventh_index=999
    ninth_maj=False
    ninth_maj_index=999
    thirteenth=False
    maj=False
    minr=False
    plusninth=False
    mincheck=False
    bfive=False
    fifth=False
    dim=False
    aug=False
    add_fifth=False
    minr_index=999
    for n in range (1,chord_length):
        step=chord_notes.index(chord[n])+1
        #print (step)
        if step==5:
            maj=True
            minr=False
        if step==4:
            minr=True
            maj=False
        if maj==True and minr==True and plusninth==False:
            plusninth=True
            minr=False
            chordname.append(" 9+")
            plusninth_index=len(chordname)
        elif minr==True and mincheck==False:
            chordname.append("m ")
            minr_index=len(chordname)
            mincheck=True
        if step==8:
            fifth=True

    for n in range (1,chord_length):
        step=chord_notes.index(chord[n])+1
        if step==6 and sus==False:
            sus=True
            chordname.append(" Sus")
            sus_index=len(chordname)
        if minr==True and step==7 and dim==False and fifth==False:
            dim=True
            chordname.append(" Dim")
            dim_index=len(chordname)
            if minr_index!=999:
                chordname[minr_index-1]='delete'
        if dim==False and step==7 and bfive==False:
            bfive=True
            chordname.append(" Add5b")
            bfive_index=len(chordname)
        if step==9 and fifth==False and aug==False:
            aug=True
            chordname.append(" Aug")
            aug_index=len(chordname)-1
        if step==9 and fifth==True and add_fifth==False:
            add_fifth_plus=True
            chordname.append(" Add5+")
            add_fifth_plus_index=len(chordname)
        if step==10:
            sixth=True
            chordname.append(" 6")
            sixth_index=len(chordname)
        if step==11:
            seventh=True
            chordname.append(" 7")
            seventh_index=len(chordname)
            #print (seventh_index)
        if step==12:
            seventh_maj=True
            chordname.append(" 7maj")
            seventh_maj_index=len(chordname)
        if step==3 and seventh==True:
            ninth=True
            chordname.append(" 9")
            ninth_index=len(chordname)
            if seventh_index!=999: 
                chordname[seventh_index-1]='delete'
        if step==3 and sus==False and seventh_maj==True:
            ninth_maj=True
            chordname.append(" 9maj")
            ninth_maj_index=len(chordname)
            if seventh_maj_index!=999:
                chordname[seventh_maj_index-1]='delete'
        if step==3 and seventh_maj==False and seventh==False:
            add_ninth=True
            chordname.append(" Add9")
            ninth_maj_index=len(chordname)
            if seventh_maj_index!=999:
                chordname[seventh_maj_index-1]='delete'        
        if step==2:
            ninthb=True
            chordname.append(" Add9b")
            ninthb_index=len(chordname)
        if ninth==True and sus==True and sixth==False and(seventh==True or seventh_maj==True):
            eleventh=True
            chordname.append(" 11")
            eleventh_index=len(chordname)
            #print (eleventh_index)
            chordname[ninth_index-1]='delete'
            chordname[sus_index-1]='delete'

        if ninth==True and sus==True and sixth==True and(seventh==True or seventh_maj==True):
            thirteenth=True
            chordname.append(" 13")
            thirteenth_index=len(chordname)
            if ninth_index!=999:
                chordname[ninth_index-1]='delete'
            if sixth_index!=999:
                chordname[sixth_index-1]='delete'
            if sus_index!=999:
                #print (sus_index)
                chordname[sus_index-1]='delete'
            if seventh_index!=999:
                #print (seventh_index)
                chordname[seventh_index-1]='delete'
            if eleventh_index!=999:
                chordname[eleventh_index-1]='delete'
            

    length=len(chordname)           
    for x in range(0,length):
        #print (x)
        if chordname[x]!='delete':
            chordname_string=chordname_string+chordname[x]
    #print (chordname)
    #print (chordname_string)
    #return chordname_string


#Generate color hotkey
def GenerateChord_hotkey(event):
    GenerateChord()

#Paste From Button
def paste():
        textbox.event_generate(("<<Paste>>"))

#paste hotkey
def paste_hotkey(event):
    paste()

#Clear
def ClearTextBox():
    textbox.delete(1.0,2000.0)

def ClearTextBox_hotkey(event):
    ClearTextBox()

#Quit
def QuitApp():
    okcancel= messagebox.askokcancel("Quit?","Do you want to quit the app?",default="ok")
    if okcancel== True:
        top.destroy()

def Quit_hotkey (event):
    QuitApp()

def save_chord1():
    global midifilename
    if os.path.exists("chord1.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('chord1.mid',midifilename)
            remove ('chord1.mid')

def save_chord2():
    global midifilename
    if os.path.exists("chord2.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('chord2.mid',midifilename)
            remove ('chord2.mid')

def save_chord3():
    global midifilename
    if os.path.exists("chord3.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('chord3.mid',midifilename)
            remove ('chord3.mid')

def save_chord1_hotkey(event):
    save_chord()
    
def save_chord2_hotkey(event):
    save_chord()

def save_chord3_hotkey(event):
    save_chord()

def save_scale1():
    global midifilename
    if os.path.exists("scale1.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('scale1.mid',midifilename)
            remove('scale1.mid')
            
def save_scale2():
    global midifilename
    if os.path.exists("scale2.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('scale2.mid',midifilename)
            remove('scale2.mid')
            
def save_scale3():
    global midifilename
    if os.path.exists("scale3.mid"):
        data=[('MIDI','*.mid')]
        midifilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if midifilename!='':
            copyfile('scale3.mid',midifilename)
            remove('scale3.mid')

def save_scale1_hotkey(event):
    True

def save_scale2_hotkey(event):
    True

def save_scale3_hotkey(event):
    True

"""def save_history():
    history_display.configure(state="normal")
    history_text=history_display.get("1.0", tk.END)
    if history_text!='':
        data=[('TXT','*.txt')]
        historyfilename=asksaveasfilename(filetypes=data, defaultextension=data)
        if historyfilename!='':
            historyfile=open(historyfilename,'w')
            historyfile.write(history_text)
            historyfile.close()
    history_display.configure(state='disabled')

def save_history_hotkey(event):
    save_history()

def erase_history():
    history_display.configure(state="normal")
    history_display.delete("1.0", tk.END)

def erase_history_hotkey(event):
    erase_history()"""

#CopyContextMenu
def create_context_menu():
    global menu
    menu = tk.Menu(root, tearoff = 0)
    menu.add_command(label="Copy", command=copy_text)
    root.bind("<Button-3>", context_menu)

def context_menu(event): 
    try: 
        menu.tk_popup(event.x_root, event.y_root)
    finally: 
        menu.grab_release()
        
def copy_text():
        root.event_generate(("<<Copy>>"))
       
#main
def main():
    init()
    create_app_window()
    create_context_menu()
    create_textbox()
    chord_display()
    create_menu()

main()
root.mainloop()
